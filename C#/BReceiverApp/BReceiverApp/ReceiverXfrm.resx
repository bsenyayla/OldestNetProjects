<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="bgWorker.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ///+AP///gD///wA///8AP///wD////A//8=
</value>
  </data>
</root>